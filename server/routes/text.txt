import React, { useState, useEffect, useCallback } from 'react';
import axios from 'axios';
import { format } from 'date-fns';
import { ProgressBar as BootstrapProgressBar } from 'react-bootstrap';
import { useParams } from 'react-router-dom';
import EmployeeSidebar from './EmployeeSidebar'; // Import EmployeeSidebar
import './EmployeeInterface.css';
import 'bootstrap/dist/css/bootstrap.min.css'; // Ensure Bootstrap CSS is imported

const EmployeeInterface = () => {
      const { assignEmail} = useParams();
    const [tasks, setTasks] = useState([]);
    const [error, setError] = useState('');
    
    // Ensure consistency in how you retrieve logged-in user's email
    const loggedInEmail = localStorage.getItem('loggedInEmail');

    // Function to fetch tasks assigned to the logged-in employee
    const fetchEmployeeTasks = useCallback(async () => {
    if (!loggedInEmail) {
        console.error('Error: No logged-in email found');
        setError('No logged-in email found. Please log in again.');
        return;
    }

    try {
        const res = await axios.get(`http://localhost:5000/api/employee-tasks?email=${loggedInEmail}`);
        const fetchedTasks = res.data;
        console.log(fetchedTasks);

        // Filter tasks based on the assigned email
        const assignedTasks = fetchedTasks.filter(task => task.assignEmail === loggedInEmail);

        const updatedTasks = await Promise.all(
            assignedTasks.map(async (task) => {
                try {
                    const storedProgress = localStorage.getItem(`progress-${task._id}`);
                    const totalDays = Math.ceil(
                        (new Date(task.endDate) - new Date(task.startDate)) / (1000 * 60 * 60 * 24),
                        console.log(task.endDate)
                    );
                    const countRes = await axios.get(`http://localhost:5000/api/data/${loggedInEmail}/count`);
                    const submissionCount = countRes.data.count;
                    const calculatedProgress = (submissionCount / totalDays) * 100 || 0;
                    const progress = storedProgress ? Number(storedProgress) : calculatedProgress;

                    return {
                        ...task,
                        progress: Math.min(progress, 100),
                    };
                } catch (error) {
                    console.error(`Error fetching submission count for ${task.assignEmail}:`, error);
                    return task;
                }
            })
        );

        setTasks(updatedTasks);
    } catch (err) {
        console.error('Error fetching tasks:', err.response ? err.response.data : err.message);
        setError('Error fetching tasks');
    }
}, [loggedInEmail]);


    // Save progress in localStorage when it changes
    const saveProgress = (taskId, progress) => {
        localStorage.setItem(`progress-${taskId}`, progress);
    };

    // Fetch tasks on component mount
    useEffect(() => {
        fetchEmployeeTasks();
    }, [fetchEmployeeTasks]);

    // 'Claim Task' button handler (dummy functionality for now)
    const handleClaimTask = (taskId) => {
        console.log(`Claim Task clicked for Task ID: ${taskId}`);
    };

    return (
        <div className="employee-interface">
            <EmployeeSidebar />
            <div className="content-wrapper">
                <h2 className="module-heading">My Tasks</h2>

                {error && <div className="alert alert-danger">{error}</div>}

                <div className="todo-list">
                    {tasks.length > 0 ? (
                        <ul className="list-group">
                            {tasks.map((task) => {
                                const progress = task.progress ?? 0;
                                saveProgress(task._id, progress);

                                const formattedStartDate = format(new Date(task.startDate), 'dd MMM yyyy');
                                const formattedEndDate = format(new Date(task.endDate), 'dd MMM yyyy');

                                return (
                                    <li key={task._id} className="list-group-item task-item">
                                        <div className="task-card">
                                            <div className="task-details">
                                                <h4 className="task-name">{task.taskName}</h4>
                                                <p className="task-date">
                                                    <strong>Assigned to mail:</strong> {task.assignEmail}
                                                </p>
                                                <p className="task-date">
                                                    <strong>Start Date:</strong> {formattedStartDate}
                                                </p>
                                                <p className="task-date">
                                                    <strong>Deadline:</strong> {formattedEndDate}
                                                </p>
                                            </div>
                                            <div className="task-progress">
                                                <p><b>Task Progress:</b></p>
                                                <BootstrapProgressBar now={progress} label={`${Math.round(progress)}%`} />
                                            </div>
                                            <button
                                                onClick={() => handleClaimTask(task._id)}
                                                className="btn btn-primary btn-sm">
                                                Claim Task
                                            </button>
                                        </div>
                                    </li>
                                );
                            })}
                        </ul>
                    ) : (
                        <p>No tasks available</p>
                    )}
                </div>
            </div>
        </div>
    );
};

export default EmployeeInterface;



-----------------------------------------------------------------------------------------------------------------
<style>
                    { 
                        `
                    .text-secondary {
                        font-size: 10px;
                    }

                    .messages {
                        flex: 2;
                        padding: 15px;
                        overflow-y: auto;
                        margin: 5px;
                        font-size: 14px;
                        border-radius: 5px;
                        background-image: linear-gradient(rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0.4)), url("https://wallpapercave.com/wp/wp9346845.jpg");
                        background-size: cover;
                        background-position: center;
                        display: flex;
                        flex-direction: column;
                        max-height: 80vh;
                        height: auto;
                    }

                    /* Hide scrollbars for all browsers */
                    .messages::-webkit-scrollbar {
                        display: none;
                    }
                    .messages {
                        -ms-overflow-style: none;
                        scrollbar-width: none;
                    }

                    .sent, .received {
                        position: relative;
                        padding: 10px 14px;
                        border-radius: 15px;
                        margin: 6px 10px;
                        max-width: 70%;
                        word-wrap: break-word;
                        white-space: pre-wrap;
                        line-height: 1.4;
                        box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.2);
                    }

                    .sent {
                        background-color: #d1f7c4;
                        align-self: flex-end;
                        text-align: left;
                        color: #000;
                    }

                    .received {
                        background-color: #fff;
                        align-self: flex-start;
                        text-align: left;
                        color: #000;
                    }

                    .timestamp {
                        font-size: 10px;
                        color: #555;
                        margin-top: 5px;
                        display: inline-block;
                    }

                    .tick {
                        font-size: 14px;
                        margin-left: 5px;
                    }

                    .single-tick {
                        color: #555;
                    }
                    .double-tick {
                        color: blue;
                    }

                    .menu-container {
                        position: relative;
                        display: inline-block;
                        margin-left: 10px;
                    }

                    .menu-icon {
                        cursor: pointer;
                        float: right;
                        margin-left: 10px;
                    }

                    .dropdown-menu {
                        position: absolute;
                        right: 0;
                        top: 20px;
                        background: white;
                        box-shadow: 0px 4px 8px rgba(0,0,0,0.2);
                        border-radius: 5px;
                        display: flex;
                        flex-direction: column;
                        z-index: 10;
                        background: #444;
                        color: white;
                    }

                    .dropdown-menu button {
                        padding: 6px 12px;
                        background: none;
                        border: none;
                        cursor: pointer;
                        display: flex;
                        align-items: center;
                        gap: 10px;
                        color: white;
                        width: 100%;
                        text-align: left;
                    }

                    .dropdown-menu button:hover {
                        background: rgba(185, 191, 185, 0.51);
                    }

                    /* Textarea for editing */
                    input[type="text"] {
                        width: 100%;
                        padding: 6px;
                        border-radius: 8px;
                        border: 1px solid #ccc;
                        outline: none;
                        resize: vertical;
                        min-height: 30px;
                        max-height: 120px;
                        overflow-y: auto;
                        font-size: 14px;
                    }
                    `}
                </style>